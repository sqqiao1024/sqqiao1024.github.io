[{"title":"My first blog","url":"/2021/08/02/My-first-blog/","content":"My first blogpart1文本测试\ntext test\n1234567890\n斜体文本斜体文本\n粗体文本粗体文本\n粗斜体文本粗斜体文本\npart2文本列表\n\n无序列表1\n\n\n无序列表2\n\n\n无序列表3\n\n\n有序列表1\n有序列表2\n有序列表3\n\n\n层级列表\n层级列表1\n层级列表2\n\n\n层级列表3\n层级列表4\n\n\n\npart3链接测试\nbaidu\n&lt;www.baidu.com&gt;\npart4\n这是一个引用\n\n这是一个二级引用\n\n这是一个三级引用\n\n\n\n\n禁止无限套娃\n\npart5划线测试\n分割线\n\n\n\n\n\n删除线\n这是要被删除的内容。\n下划线\n这行文字已被添加下划线\npart6表格测试\n\n\n\n姓名\n年龄\n工作\n\n\n\n小可爱\n18\n吃可爱多\n\n\n小小勇敢\n20\n爬棵勇敢树\n\n\n小小小机智\n22\n看一本机智书\n\n\n\n\n\n\nproject1\nproject2\nproject3\n\n\n\ndata1\ndata2\ndata3\n\n\ndata4\ndata5\ndata6\n\n\npart7图片测试\n\n………………","tags":["test"]},{"title":"Hello World","url":"/2021/08/01/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"test","url":"/2021/08/02/test/","content":""},{"title":"接下来的博客内容","url":"/2021/08/03/%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9/","content":"花了一天时间，跟着网上的教程，总算把自己的博客搭起来了。接下来的一段时间里会把自己搭建博客的过程经历写下来以供参考。\n因为自己是按照傻瓜式的教程一步一步跟着搭建的，所以很多深层次的内容也不是很明白，以后也会边学习边分享。\nThere are so many things to learn.\n"},{"title":"利用HEXO搭建个人博客并托管到GitHub上","url":"/2021/08/04/%E5%88%A9%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E6%89%98%E7%AE%A1%E5%88%B0GitHub%E4%B8%8A/","content":"网上此类教程很多，我也是跟着教程一步一步搭建的，这里分享下我个人的搭建过程以供参考。\n准备工作1. 注册个人GitHub账号要注意Username的填写，最后建立的博客地址是:username.github.io\n2. 安装Node.js和Git正式开始1. 登录个人GitHub并创建RepositoryRepository name 应填写为:username.github.io(username 换成自己注册时的)\n2. 配置和使用GitHub在开始菜单中找到Git bash并打开\n\n生成新的SSH Key：\n\n$ ssh-keygen -t rsa -C “邮件地址@youremail.com”\n\n\nGenerating public/private rsa key pair.\n\n\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;\n\n注意邮箱地址，填写注册GitHub时的邮箱。然后系统会要你设置密码：\n\nEnter passphrase (empty for no passphrase):&lt;设置密码&gt;\n\n\nEnter same passphrase again:&lt;再次输入密码&gt;\n\n这里输入密码是不显示的，不要以为是卡了，正常输入就行。最后看到这样的界面就成功设置SSH key了\n\n添加SSH Key到GitHub\n当完成上述步骤可以在本地文件夹找到id_rsa.pub文件，位置一般在用户文档里面的.ssh里面，具体位置可以参照上图成功设置SSH key时界面第四行。（如果找不到记得打开文件隐藏项目，同时也把文件扩展名勾上）\n\n用记事本打开id_rsa.pub并复制里面的内容，再打开你的GitHub主页，点击头像后箭头-Settings-SSH and GPG keys-New SSH key\n将刚刚复制的内容粘贴到Key里面，Title可以随便填写\n\n测试一下\n打开git bash输入以下代码\n\n$ ssh -T &#x67;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#111;&#x6d;\n\n如果得到以下反馈\n\nThe authenticity of host ‘GitHub.com (207.97.227.239)’ can’t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)\n\n输入yes回车\n\nEnter passphrase for key ‘/c/Users/lenovo/.ssh/id_rsa’:\n\n输入刚才设置的密码回车\n现在已经可以通过SSH链接到GitHub了！最后再完善下个人信息\n\n$ git config –global user.name “sqqiao1024”//输入注册时的username\n\n\n$ git config –global user.email  “&#115;&#113;&#x71;&#105;&#x61;&#111;&#x31;&#x30;&#x32;&#52;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#109;“//填写注册邮箱\n\n3. 搭建Hexo博客利用npm命令安装hexo\n\n$ cd\n\n\n$ npm install -g hexo\n\n注意这里运行之后可能会一直卡光标，需要更换安装源，具体更换方法可以查看下篇博客。\n创建独立博客项目文件夹\n安装完成之后，关掉Git Bash窗口，在本地创建一个与Repository中博客项目同名的文件夹（如D:\\username.github.io），在文件夹上右击选择Git bash here，记得以后每次进行博客搭建工作时，都要在这个目录文件上打开Git bash。\n下面依次执行以下指令\n\n$ hexo init\n\n\n$ npm install\n\n\n$ npm install hexo-deployer-git –save\n\n现在就已经搭建好本地的Hexo博客了，执行完以下命令就可以到浏览器输入localhost：4000查看了\n\n$ hexo g\n\n\n$ hexo s\n\n注意以后每次进行本地博客改动都要hexo g生成一下\n4. 将博客部署到GitHub进入GitHub个人主页中的Repository，复制新建的独立博客项目：username.github.io的SSH码\n\n打开你刚建的username.github.io本地文件夹，找到_config.yml文件并打开，把刚刚复制的SSH码粘贴到“repository：”后面\ndeploy:  type: git  repository: git@github.com:username/username.github.io.git  branch: master\n接下来右击username.github.io文件夹打开Git bash here执行以下指令完成部署\n\n$ hexo g\n\n\n$ hexo d\n\n注意该过程可能需要输入密码，就是你前面设置的密码\n最后用浏览器打开username.github.io如果能正常进入，那么就代表博客已经搭建好了！\n至此博客搭建过程就结束了！\n","tags":["分享"]},{"title":"修改npm源","url":"/2021/08/04/%E4%BF%AE%E6%94%B9npm%E6%BA%90/","content":"在上篇博文中分享了本博客的搭建过程，在搭建过程中难免遇到各种问题，其中在利用npm命令安装hexo时会卡光标，利用搜索引擎一番了解后，现将解决方法分享一下。\n因为网络原因，访问外部npm源不太顺畅，这里可以切换为国内的npm源，比较有名的就是淘宝npm镜像。\n1. 临时使用在 npm install XXX 时加入 –registry URL 即可，不会影响到本地配置，如：\n\nnpm –registry https://registry.npm.taobao.org install express\n\n注意：上面应该是两个“–”，上传到博客上不知道怎么变成一个了，以后会专门研究下。\n2. 持久使用永久修改本地npm的配置：\n\nnpm config set registry https://registry.npm.taobao.org\n\n3. 其他命令查看npm源地址有没有换成功：\n\nnpm config get registry重置为官方源：npm config set registry https://registry.npmjs.org/\n\n以上。","tags":["分享"]},{"title":"无法访问GitHub的简单解决方法","url":"/2021/08/05/%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AEGitHub%E7%9A%84%E7%AE%80%E5%8D%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","content":"由于众所周知的网络原因，在国内访问GitHub会时不时出现抽风打不开的情况，现提供一个简单的解决方法。原理就是修改本地hosts文件，绕过DNS服务器直接访问GitHub。\n首先我们要打开一个网站\n\nhttps://github.com.ipaddress.com/www.github.com\n\n该网站会实时更新GitHub的IP地址，注意每隔一段时间都会变，所以这只是一个临时的解决方法，当然也有大佬写的自动同步修改的程序，感兴趣的可以找下。\n接下来我们就要找到本地hosts文件，具体路径如下，在修改之前可以先备份一下hosts文件\n\nC:\\Windows\\System32\\drivers\\etc\n\n用记事本打开hosts文件，在最后一行添加如下内容\n\n140.82.112.4 github.com （前面的IP地址是随时更换的，要替换成前面网站查询到的IP地址）\n\n然后保存，如果提示没有权限，可以先保存到桌面上然后再拉进去替换掉\n至此应该就可以打开GitHub了。\n最后注意：\n\n修改hosts文件时一定要注意文件扩展名，hosts文件是没有扩展名的，修改保存时容易保存为txt文件，这样是不生效的。\n\n","tags":["分享"]},{"title":"如何使用Markdown编写文档","url":"/2021/08/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Markdown%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3/","content":"使用Hexo搭建好博客后，最重要的写博客，这就需要使用Markdown编写文档了，这里推荐个私以为还不错的教程，链接如下\n如何使用Markdown 编写文档\n\n","tags":["分享"]},{"title":"python学习之切片操作和深浅copy","url":"/2021/08/27/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C%E5%92%8C%E6%B7%B1%E6%B5%85copy/","content":"\n写在前头：由于本人算是python初学者，对很多知识理解并不到位，以下内容仅仅是对学习过程中遇到的问题的粗浅理解感悟，并不够专业，甚至可能是错误的理解！\n今天在python学习中遇到一个很有意思的东西，就是列表的切片操作，视频中提到 l1[:]相当于对列表l1进行了一次浅copy:\n&gt;&gt;&gt; l1 = [1, 2, [3, 4]]&gt;&gt;&gt; l2 = l1[:]&gt;&gt;&gt; print(id(l1), id(l2))2378994730432 2378994377792&gt;&gt;&gt;\n通过查看两个列表的id号可以看出确实进行了一次copy，而不是赋值\n&gt;&gt;&gt; print(id(l1[2]), id(l2[2]))2378994730496 2378994730496&gt;&gt;&gt;\n通过查看列表中不可变类型数据的id号可以看出进行的是一次浅copy\n同样的，字符串也可以进行切片操作，如下：\n&gt;&gt;&gt; str1 = &#x27;abcd&#x27;&gt;&gt;&gt; str2 = str1[:]&gt;&gt;&gt; print(id(str1), id(str2))2378994766768 2378994766768&gt;&gt;&gt;\n为何在字符串的切片操作中，前后两个字符串的id号相同呢？不是说好的相当于进行了一次浅copy？当然熟悉可变不可变数据类型的朋友肯定一口就能答上来，列表属于可变类型，能够进行深浅copy，但是字符串属于不可变类型，没有copy操作一说\n&gt;&gt;&gt; str3 = str1.copy()Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;AttributeError: &#x27;str&#x27; object has no attribute &#x27;copy&#x27;&gt;&gt;&gt;\n对于初学且好学的朋友来说，很多概念没有形成体系，就会容易在这些地方发现问题并成功钻进牛角间。\n","tags":["share"]},{"title":"python基本数据类型之字典类型","url":"/2021/08/17/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AD%97%E5%85%B8%E7%B1%BB%E5%9E%8B/","content":"在python的基本数据类型中有一个字典类型，与列表类型相似，也有不同之处。\n字典类型：key对应值，其中key通常为字符串类型\n作用：用来存多个值，每个值都有唯一一个key与其对应\n定义：在{ }内用逗号分开多个 key：value\nd = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;\nprint(type(d))\nprint(d[&#39;a&#39;])      ##取值时用[]\n与列表区别：\n列表有序，字典无序\n列表根据编号取值，字典根据key取值，因此字典中值的前面要加上key：\n\n","tags":["share"]}]